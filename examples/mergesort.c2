void mergesort(int *v, int n);
int sort(int *v, int *c, int i, int f);
void merge(int *v, int *c, int i, int m, int f);

int main () {
  int i;
  int * v;
  v = malloc(4*8);
  v[0] = 0;
  v[1] = 100;
  v[2] = 20;
  v[3] = 312;
  v[4] = 21;
  v[5] = 15;
  v[6] = 17;
  v[7] = 21;

  mergesort(v, 8);

  i = 0;
  loop{
    break when(!(i<8));
    print("%d ", v[i]);
    i = i+1;
  }

  return 0;
}


void mergesort(int *v, int n) {
  int *c;
  c = malloc(4 * n);
  sort(v, c, 0, n - 1);
  free(c);
}


int sort(int *v, int *c, int i, int f) {
  if (i >= f) return 0;

  int m;
  m = (i + f) / 2;

  sort(v, c, i, m);
  sort(v, c, m + 1, f);

  if (v[m] <= v[m + 1]) return 0;

  merge(v, c, i, m, f);
}


void merge(int *v, int *c, int i, int m, int f) {
  int z;
  int iv;
  int ic;
  iv = i;
  ic = m+1;

  z = i;

  loop{
    break when(!(z<=f));
    c[z] = v[z];
    z = z+1;
  }

  z = i;

  loop{
    break when (!(iv <= m && ic <= f));
   
    if (c[iv] < c[ic]) {
      v[z] = c[iv];
      z = z+1;
      iv = iv+1;
    }
    else {
      v[z] = c[ic];
      z = z+1;
      ic = ic+1;
    }
  }

  loop{
    break when (!(iv <= m));
    v[z] = c[iv];
    z = z+1;
    iv = iv+1;
  }
  
  loop{
    break when (!(ic <= f));
    v[z] = c[ic];
    z = z+1;
    ic = ic+1;
  }

}